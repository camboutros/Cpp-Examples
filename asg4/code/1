// $Id: shape.cpp,v 1.1 2015-07-16 16:47:51-07 - - $

/////////////////////////////////////
// Name: Camellia Boutros          //
// CruzID: cboutros                //
// Class: CMPS 109                 //
// Title: asg4                     //
// Date: 5/16/2016                 //
/////////////////////////////////////

#include <typeinfo>
#include <unordered_map>
#include <cmath>
using namespace std;

#include "shape.h"
#include "util.h"
#include "graphics.h"

static unordered_map<void*,string> fontname {
   {GLUT_BITMAP_8_BY_13       , "Fixed-8x13"    },
   {GLUT_BITMAP_9_BY_15       , "Fixed-9x15"    },
   {GLUT_BITMAP_HELVETICA_10  , "Helvetica-10"  },
   {GLUT_BITMAP_HELVETICA_12  , "Helvetica-12"  },
   {GLUT_BITMAP_HELVETICA_18  , "Helvetica-18"  },
   {GLUT_BITMAP_TIMES_ROMAN_10, "Times-Roman-10"},
   {GLUT_BITMAP_TIMES_ROMAN_24, "Times-Roman-24"},
};

static unordered_map<string,void*> fontcode {
   {"Fixed-8x13"    , GLUT_BITMAP_8_BY_13       },
   {"Fixed-9x15"    , GLUT_BITMAP_9_BY_15       },
   {"Helvetica-10"  , GLUT_BITMAP_HELVETICA_10  },
   {"Helvetica-12"  , GLUT_BITMAP_HELVETICA_12  },
   {"Helvetica-18"  , GLUT_BITMAP_HELVETICA_18  },
   {"Times-Roman-10", GLUT_BITMAP_TIMES_ROMAN_10},
   {"Times-Roman-24", GLUT_BITMAP_TIMES_ROMAN_24},
};

ostream& operator<< (ostream& out, const vertex& where) {
   out << "(" << where.xpos << "," << where.ypos << ")";
   return out;
}

shape::shape() {
   DEBUGF ('c', this);
}

text::text (void* s_name, const string& data) {
   DEBUGF ('c', this);
   textdata = data;
   string name = reinterpret_cast<string>(s_name);
   auto i = fontcode.find(name);
   if (i == fontcode.end()){
      throw runtime_error("Not a font");
   }
   glut_bitmap_font = i->second;
}

ellipse::ellipse (GLfloat width, GLfloat height) {
   DEBUGF ('c', this);
   
   dimension = {width, height};
   
}

circle::circle (GLfloat diameter): ellipse (diameter, diameter) {
   DEBUGF ('c', this);
   dimension = {diameter, diameter};

}


polygon::polygon (const vertex_list& vertices): vertices(vertices) {
   DEBUGF ('c', this);
   //for (auto i : vertices){
   //   cout << "Vertex: " << i.xpos << ", " << i.ypos << endl; //test
   //}
}

rectangle::rectangle (GLfloat width, GLfloat height):
            polygon({{0,0}, {width, 0}, {width, height}, {0, height}}) {
   DEBUGF ('c', this << "(" << width << "," << height << ")");

}

square::square (GLfloat width): rectangle (width, width) {
   DEBUGF ('c', this);
   
}

diamond::diamond(const GLfloat wth, const GLfloat hei):
   polygon({{0,0}, {-wth/2, hei/2}, {0, hei}, {wth/2, hei/2}}){
      
}

triangle::triangle(const vertex_list& vtx_array): polygon (vtx_array){
}

equilateral::equilateral(const GLfloat wth):
   triangle({{(-wth/2), 0},{(wth/2), 0},{0, GLfloat{sqrt(3)}*(wth/2)}}){
}

void text::draw (const vertex& center, const rgbcolor& color) const {
   DEBUGF ('d', this << "(" << center << "," << color << ")");
   
}

void ellipse::draw (const vertex& center, const rgbcolor& color) const {
   DEBUGF ('d', this << "(" << center << "," << color << ")");
   GLfloat diameter = dimension.xpos; 
   //glLineWidth(2);
   // cout << "Hit" << endl; //test; does not hit 

   glBegin (GL_POLYGON);
   glEnable(GL_LINE_SMOOTH);
   glColor3ubv (color.ubvec);
   const float points = 32; 
   const GLfloat theta = 2.0 * M_PI / points; 
   for (float point = 0; point < 2*M_PI; point += theta){
      GLfloat xpos = (diameter/2) * cos(point) + center.xpos;
      GLfloat ypos = (diameter/2) *sin(point) + center.ypos;
      glVertex2f (xpos, ypos); 
   }
   glEnd();
   if(window::selected){
      glLineWidth(window::border_to_use);
      glBegin(GL_LINE_LOOP);
      glColor3ubv(window::color_to_use.ubvec);
      
      const float points = 32; 
      const GLfloat theta = 2.0 * M_PI / points; 
      for (float point = 0; point < 2*M_PI; point += theta){
         GLfloat xpos = (diameter/2) * cos(point) + center.xpos;
         GLfloat ypos = (diameter/2) *sin(point) + center.ypos;
         glVertex2f (xpos, ypos); 
      }
      glEnd();
   }
}

void polygon::draw (const vertex& center, const rgbcolor& color) const {
   DEBUGF ('d', this << "(" << center << "," << color << ")");
   GLfloat x_dim;
   GLfloat y_dim;
   for(const vertex vert : vertices) { 
      x_dim += vert.xpos;
      y_dim += vert.ypos;
   }
   x_dim = (x_dim/vertices.size());
   y_dim = (y_dim/vertices.size());
   
   glBegin (GL_POLYGON);
   glColor3ubv (color.ubvec); //change to color
   for(const vertex vert1 : vertices){
      GLfloat x_draw = (center.xpos + vert1.xpos - x_dim);
      GLfloat y_draw = (center.ypos + vert1.ypos - y_dim);
      glVertex2f(x_draw, y_draw);
   }
   glEnd();
   if(window::selected){
      glLineWidth(window::border_to_use);
      glBegin(GL_LINE_LOOP);
      glColor3ubv(window::color_to_use.ubvec);
      for (const vertex vert2 : vertices){
         
      GLfloat x_draw = (center.xpos + vert2.xpos - x_dim);
      GLfloat y_draw = (center.ypos + vert2.ypos - y_dim);
      glVertex2f(x_draw,y_draw);
      }
      glEnd();
   }
   //glVertex2f (0,0); //change to dimensions
   //glVertex2f (3,0); //change to dimensions
   //glVertex2f (25,11); //change to dimensions
   //glVertex2f (65,7); 
   //glEnd();
}

void shape::show (ostream& out) const {
   out << this << "->" << demangle (*this) << ": ";
   
}

void text::show (ostream& out) const {
   shape::show (out);
   out << glut_bitmap_font << "(" << fontname[glut_bitmap_font]
       << ") \"" << textdata << "\"";
}

void ellipse::show (ostream& out) const {
   shape::show (out);
   out << "{" << dimension << "}";
   
}

void polygon::show (ostream& out) const {
   shape::show (out);
   out << "{" << vertices << "}";
}

ostream& operator<< (ostream& out, const shape& obj) {
   obj.show (out);
   return out;
}

